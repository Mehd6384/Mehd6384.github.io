---
layout: post
---
<img src="/images/fulls/02.jpg" class="fit image">

# GameDev Insights 1: Skating game, the beginning

One of the main incentives for starting this blog was for me to keep a trace of some of the hard-earned insights both in game programming and machine learning. Indeed, I recently found myself fighting with some recurrent problems, having forgotten the solution I came up with in a previous game prototype. In order to increase efficiency and maybe help out some others self-taught game devs, I tought blog posts could be a nice solution !

## Context 

While browsing Twitter and Reddit, I came across some videos promotting the game SKTBRD, currently under developpement by [KevKev](https://twitter.com/Der_Kevin). The game feel really appealed me and I thought that it would be interesting to figure out how to do something similar. 

## My realisation

After a few hours of works, here's what I came up with: 

[![Smear](https://imgur.com/a/724ywVF)](https://youtu.be/X3LlX-zTCko "Smear effect")

The whole scene is rather basic but I was satisfied with the physics aspects.


## Some insights gained  

### Camera
Firstly, it was in this game that I figured out the setup for nice, smooth, lerping camera. 

Basically I: 

1. Update the camera's rotation, look target in the `Update` method 
1. Added the code for updating the camera position in the `FixedUpdate` method

### Skater

In the current state, the player's rotation relied on the **concatenation of three quaternions**. 

* A first rotation that would align the player's forward axis  
* another
* a third




By the way, [here's the whole code](https://github.com/Mehd6384/Unity/tree/master/SkatingGame)

## TODO

As I said, the game physics are quite satisfying, from a realistic point of view. However, even though it seems obvious, fun (both in creating and playing the game) depends heavily how you tweak reality. I'm now aiming to 
* Allow wall riding
* Implement the possibility of jumping and falling into the same quater
* Allow slid