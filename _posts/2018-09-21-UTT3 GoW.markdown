---
layout: post
title: "Unity Tips & Tricks #3: Kratos Controller Part I"
categories: [Unity, Gamedev, Controller]
---
<img src="/images/kratos_front.jpg" class="fit image">

# Context 

Recently, while browsing on Reddit, I came across [this post](https://www.reddit.com/r/Unity3D/comments/979q4i/i_recreated_god_of_war_e3_demo_in_unity/) where someone shows of its God of War demo, made in Unity. The whole thing is nice, and given I'd wanted to give a try myself a recreating some of the God of War mechanics, I decided it was time to give it a go ! 


# Modeling/Texturing 

I did all the modeling all by myself, using Blender. Given I've recently purchased almighty RetopoFlow 2.0, I didn't follow my old workflow that relied on creating first a **skinned mesh**, sculpting it and then try to skrinkwrap it as well as possible before patching the wholes with manual retopology. RetopoFlow is really awesome and definitely introduces more freedom. 

Here's the finished model before retopology step: 


<p align="center">
  <img src="images/kratos1.png"/></p>

Afterwards, with textures from Substance Painter: 

<p align="center">
  <img src="images/kratos_2.png"/></p>

# Animating 

I also did all the animations by myself. First, I worked with no Leviathan Axe animation. This means that Kratos's rig was nothing but his own bones. In this setting I made the Idle, Run, Dash, various hits animations, including a headbutt. In parallel, I was setting up the controller, using my previously detailed insights (see my previous post on 2.5D controller). One


# Changing perspective 

My first approach was to go ahead and copy as much as possible the mechanics of the genuine God Of War. But I quickly came to realise that I would very likely get lost. Indeed, managing the combat mechanics, the axe logic, aiming, dodging, impacting, ennemy behaviour, effects was probably too much for a first try. Hence, I thought I'd change my perspective. 

I hence came up with the following idea: change the view point. I basically changed the camera from a TPS behaviour (ie. looking over the character's shoulder) to an isometric setting. 

<p align="center">
  <img src="images/tps_to_isom.png"/></p>

This simply allowed me for various simplification while retaining most of my previous code: 

* All the logic behind movement is still effective (rigidbodies movement, computation of direction and so on)
* The only way to shoot the axe would be forward. Hence, I can focus on shooting, recalling and switching weapon logic. 

# Global setup 

<p align="center">
  <img src="images/setup.png"/></p>


# Movement insights

While I was working on the skating scene, I was concatenating Quaternions to reach the desired final rotation. In this process, several rotations were involved. 

1. A rotation that transforms the character's up vector to the current ground normal vector 
1. A rotation to face the current velocity vector, projected on the Y-up normal defined plane. 

I used a method similar to the second item to improve the way the character turn. Here's a method comparaison: 

| Method  |                                                                    Previous                                                                    |                                                                               Current                                                                               |
|:-------:|:----------------------------------------------------------------------------------------------------------------------------------------------:|:-------------------------------------------------------------------------------------------------------------------------------------------------------------------:|
|  Step I |  Compute direction based on player's input and camera position wtr to character                                                                | Compute direction based on player's input and camera position wtr to character                                                                                      |
| Step II |  Add force to the player. The force is oriented by the player's forward.   Meanwhile, turn the player (Quaternion.Lerp) to face this direction |  Add force to the player, based on the desired direction.   Rotate the player forwards towards this force.   This allows to use the angle value to blend animations |


<p align="center">
  <img src="https://media.giphy.com/media/kKLkIrO0d0b1Y0tmQJ/giphy.gif"/></p>



# Axe stuff 

* Axe behaviour 
* Separate rig 
* Try to go with enums instead of list of bools  